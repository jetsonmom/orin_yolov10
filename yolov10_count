{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyObr0JMXetMq3mGbD6ob1EZ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jetsonmom/orin_yolov10/blob/main/yolov10_count\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T35VndW-Wlbb"
      },
      "outputs": [],
      "source": [
        "!pip install git+https://github.com/jameslahm/yolov10\n",
        "!pip install yt-dlp\n",
        "!apt-get install fonts-nanum"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yt_dlp\n",
        "from ultralytics import YOLOv10\n",
        "import cv2\n",
        "import os\n",
        "import time\n",
        "import numpy as np\n",
        "from PIL import Image, ImageDraw, ImageFont\n",
        "from datetime import datetime  # 추가된 부분\n"
      ],
      "metadata": {
        "id": "KhAsISeMj5r2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def put_text(img, text, position, font_size=32, font_color=(255,255,255)):\n",
        "    \"\"\"나눔고딕 폰트로 한글 텍스트를 이미지에 추가하는 함수\"\"\"\n",
        "    img_pil = Image.fromarray(img)\n",
        "    draw = ImageDraw.Draw(img_pil)\n",
        "\n",
        "    font_paths = [\n",
        "        \"NanumGothic.ttf\",\n",
        "        \"/usr/share/fonts/truetype/nanum/NanumGothic.ttf\",\n",
        "        \"C:/Windows/Fonts/NanumGothic.ttf\",\n",
        "        \"/Library/Fonts/NanumGothic.ttf\",\n",
        "        \"나눔고딕.ttf\"\n",
        "    ]\n",
        "\n",
        "    font = None\n",
        "    for path in font_paths:\n",
        "        try:\n",
        "            font = ImageFont.truetype(path, font_size)\n",
        "            break\n",
        "        except:\n",
        "            continue\n",
        "\n",
        "    if font is None:\n",
        "        print(\"나눔고딕 폰트를 찾을 수 없습니다. 폰트를 설치해주세요.\")\n",
        "        return img\n",
        "\n",
        "    draw.text(position, text, font=font, fill=font_color)\n",
        "    return np.array(img_pil)\n",
        "\n",
        "def download_and_process_video(url):\n",
        "    \"\"\"\n",
        "    YouTube 영상을 다운로드하고 객체를 감지하는 함수\n",
        "\n",
        "    Args:\n",
        "        url (str): YouTube 영상 URL\n",
        "    \"\"\"\n",
        "    video_path = None  # 임시 파일 경로를 저장할 변수\n",
        "    try:\n",
        "        # output 폴더 생성\n",
        "        if not os.path.exists('output'):\n",
        "            os.makedirs('output')\n",
        "            print(\"output 폴더가 생성되었습니다.\")\n",
        "\n",
        "        # 임시 파일명 생성\n",
        "        timestamp = int(time.time())\n",
        "        video_path = f'temp_video_{timestamp}.mp4'  # temp_ 접두어 추가\n",
        "\n",
        "        # 저장할 비디오 파일명 생성 (현재 날짜시간 사용)\n",
        "        now = datetime.now()\n",
        "        output_filename = f'output/detected_{now.strftime(\"%Y%m%d_%H%M%S\")}.mp4'\n",
        "\n",
        "        # 영상 다운로드 설정\n",
        "        ydl_opts = {\n",
        "            'format': 'best[ext=mp4]',\n",
        "            'outtmpl': video_path,\n",
        "            'quiet': True\n",
        "        }\n",
        "\n",
        "        print(\"영상 다운로드 중...\")\n",
        "        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n",
        "            ydl.download([url])\n",
        "\n",
        "        print(\"YOLOv10 모델 로딩 중...\")\n",
        "        model = YOLOv10.from_pretrained('jameslahm/yolov10n')\n",
        "\n",
        "        # 비디오 캡처 객체 생성\n",
        "        cap = cv2.VideoCapture(video_path)\n",
        "        if not cap.isOpened():\n",
        "            raise Exception(\"비디오를 열 수 없습니다.\")\n",
        "\n",
        "        # 비디오 속성 가져오기\n",
        "        frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
        "        frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
        "        fps = int(cap.get(cv2.CAP_PROP_FPS))\n",
        "\n",
        "        # VideoWriter 객체 생성\n",
        "        fourcc = cv2.VideoWriter_fourcc(*'mp4v')\n",
        "        out = cv2.VideoWriter(output_filename, fourcc, fps, (frame_width, frame_height))\n",
        "        print(f\"처리된 영상을 {output_filename}로 저장합니다.\")\n",
        "\n",
        "        # 윈도우 생성\n",
        "        cv2.namedWindow(\"Object Detection\", cv2.WINDOW_NORMAL)\n",
        "\n",
        "        while cap.isOpened():\n",
        "            success, frame = cap.read()\n",
        "            if not success:\n",
        "                break\n",
        "\n",
        "            # 객체 감지 수행 (person=0, car=2, motorcycle=3)\n",
        "            results = model.predict(source=frame, classes=[0, 2, 3], conf=0.3)\n",
        "\n",
        "            # 객체 수 계산\n",
        "            boxes = results[0].boxes\n",
        "            person_count = len([box for box in boxes if box.cls == 0])\n",
        "            car_count = len([box for box in boxes if box.cls == 2])\n",
        "            motorcycle_count = len([box for box in boxes if box.cls == 3])\n",
        "\n",
        "            # 결과 시각화\n",
        "            annotated_frame = results[0].plot()\n",
        "\n",
        "            # BGR에서 RGB로 변환\n",
        "            annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)\n",
        "\n",
        "            # 정보 표시를 위한 반투명 배경\n",
        "            overlay = annotated_frame.copy()\n",
        "            cv2.rectangle(overlay, (5, 5), (250, 125), (0, 0, 0), -1)\n",
        "            cv2.addWeighted(overlay, 0.6, annotated_frame, 0.4, 0, annotated_frame)\n",
        "\n",
        "            # 한글 텍스트 추가\n",
        "            annotated_frame = put_text(\n",
        "                annotated_frame,\n",
        "                f\"사람: {person_count}명\",\n",
        "                (10, 15),\n",
        "                font_size=30,\n",
        "                font_color=(0, 255, 0)\n",
        "            )\n",
        "\n",
        "            annotated_frame = put_text(\n",
        "                annotated_frame,\n",
        "                f\"자동차: {car_count}대\",\n",
        "                (10, 50),\n",
        "                font_size=30,\n",
        "                font_color=(255, 255, 0)\n",
        "            )\n",
        "\n",
        "            annotated_frame = put_text(\n",
        "                annotated_frame,\n",
        "                f\"오토바이: {motorcycle_count}대\",\n",
        "                (10, 85),\n",
        "                font_size=30,\n",
        "                font_color=(0, 255, 255)\n",
        "            )\n",
        "\n",
        "            # RGB에서 BGR로 변환\n",
        "            annotated_frame = cv2.cvtColor(annotated_frame, cv2.COLOR_RGB2BGR)\n",
        "\n",
        "            # 처리된 프레임 저장\n",
        "            out.write(annotated_frame)\n",
        "\n",
        "            # 화면에 표시\n",
        "            cv2.imshow(\"Object Detection\", annotated_frame)\n",
        "\n",
        "            # 'q' 키나 ESC를 누르면 종료\n",
        "            key = cv2.waitKey(1) & 0xFF\n",
        "            if key == ord('q') or key == 27:\n",
        "                break\n",
        "\n",
        "        # 자원 해제\n",
        "        cap.release()\n",
        "        out.release()\n",
        "        cv2.destroyAllWindows()\n",
        "\n",
        "        print(\"\\n처리가 완료되었습니다.\")\n",
        "        print(f\"- 결과 영상 저장됨: {output_filename}\")\n",
        "\n",
        "        # 임시 파일 삭제\n",
        "        if video_path and os.path.exists(video_path):\n",
        "            os.remove(video_path)\n",
        "            print(\"- 임시 파일이 삭제되었습니다.\")\n",
        "\n",
        "    except Exception as e:\n",
        "        print(f\"오류 발생: {str(e)}\")\n",
        "        # 에러 발생 시에도 임시 파일 삭제\n",
        "        if video_path and os.path.exists(video_path):\n",
        "            os.remove(video_path)\n",
        "            print(\"- 임시 파일이 삭제되었습니다.\")\n",
        "\n",
        "    finally:\n",
        "        # 안전하게 임시 파일 삭제 확인\n",
        "        if video_path and os.path.exists(video_path):\n",
        "            try:\n",
        "                os.remove(video_path)\n",
        "                print(\"- 임시 파일이 삭제되었습니다.\")\n",
        "            except:\n",
        "                print(\"- 임시 파일 삭제 중 오류가 발생했습니다.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    url = \"https://www.youtube.com/watch?v=0zGm62U8hzA\"\n",
        "    download_and_process_video(url)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "pMWA-hZylGcE"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}